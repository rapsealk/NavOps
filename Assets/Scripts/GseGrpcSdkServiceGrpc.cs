// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GseGrpcSdkService.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Tencentcloud.Gse.Grpcsdk {
  public static partial class GseGrpcSdkService
  {
    static readonly string __ServiceName = "tencentcloud.gse.grpcsdk.GseGrpcSdkService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tencentcloud.Gse.Grpcsdk.ProcessReadyRequest> __Marshaller_tencentcloud_gse_grpcsdk_ProcessReadyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tencentcloud.Gse.Grpcsdk.ProcessReadyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tencentcloud.Gse.Grpcsdk.GseResponse> __Marshaller_tencentcloud_gse_grpcsdk_GseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tencentcloud.Gse.Grpcsdk.GseResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tencentcloud.Gse.Grpcsdk.ActivateGameServerSessionRequest> __Marshaller_tencentcloud_gse_grpcsdk_ActivateGameServerSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tencentcloud.Gse.Grpcsdk.ActivateGameServerSessionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tencentcloud.Gse.Grpcsdk.AcceptPlayerSessionRequest> __Marshaller_tencentcloud_gse_grpcsdk_AcceptPlayerSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tencentcloud.Gse.Grpcsdk.AcceptPlayerSessionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tencentcloud.Gse.Grpcsdk.RemovePlayerSessionRequest> __Marshaller_tencentcloud_gse_grpcsdk_RemovePlayerSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tencentcloud.Gse.Grpcsdk.RemovePlayerSessionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tencentcloud.Gse.Grpcsdk.DescribePlayerSessionsRequest> __Marshaller_tencentcloud_gse_grpcsdk_DescribePlayerSessionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tencentcloud.Gse.Grpcsdk.DescribePlayerSessionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tencentcloud.Gse.Grpcsdk.DescribePlayerSessionsResponse> __Marshaller_tencentcloud_gse_grpcsdk_DescribePlayerSessionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tencentcloud.Gse.Grpcsdk.DescribePlayerSessionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tencentcloud.Gse.Grpcsdk.UpdatePlayerSessionCreationPolicyRequest> __Marshaller_tencentcloud_gse_grpcsdk_UpdatePlayerSessionCreationPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tencentcloud.Gse.Grpcsdk.UpdatePlayerSessionCreationPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tencentcloud.Gse.Grpcsdk.TerminateGameServerSessionRequest> __Marshaller_tencentcloud_gse_grpcsdk_TerminateGameServerSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tencentcloud.Gse.Grpcsdk.TerminateGameServerSessionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tencentcloud.Gse.Grpcsdk.ProcessEndingRequest> __Marshaller_tencentcloud_gse_grpcsdk_ProcessEndingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tencentcloud.Gse.Grpcsdk.ProcessEndingRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Tencentcloud.Gse.Grpcsdk.ReportCustomDataRequest> __Marshaller_tencentcloud_gse_grpcsdk_ReportCustomDataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tencentcloud.Gse.Grpcsdk.ReportCustomDataRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tencentcloud.Gse.Grpcsdk.ProcessReadyRequest, global::Tencentcloud.Gse.Grpcsdk.GseResponse> __Method_ProcessReady = new grpc::Method<global::Tencentcloud.Gse.Grpcsdk.ProcessReadyRequest, global::Tencentcloud.Gse.Grpcsdk.GseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ProcessReady",
        __Marshaller_tencentcloud_gse_grpcsdk_ProcessReadyRequest,
        __Marshaller_tencentcloud_gse_grpcsdk_GseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tencentcloud.Gse.Grpcsdk.ActivateGameServerSessionRequest, global::Tencentcloud.Gse.Grpcsdk.GseResponse> __Method_ActivateGameServerSession = new grpc::Method<global::Tencentcloud.Gse.Grpcsdk.ActivateGameServerSessionRequest, global::Tencentcloud.Gse.Grpcsdk.GseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ActivateGameServerSession",
        __Marshaller_tencentcloud_gse_grpcsdk_ActivateGameServerSessionRequest,
        __Marshaller_tencentcloud_gse_grpcsdk_GseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tencentcloud.Gse.Grpcsdk.AcceptPlayerSessionRequest, global::Tencentcloud.Gse.Grpcsdk.GseResponse> __Method_AcceptPlayerSession = new grpc::Method<global::Tencentcloud.Gse.Grpcsdk.AcceptPlayerSessionRequest, global::Tencentcloud.Gse.Grpcsdk.GseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AcceptPlayerSession",
        __Marshaller_tencentcloud_gse_grpcsdk_AcceptPlayerSessionRequest,
        __Marshaller_tencentcloud_gse_grpcsdk_GseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tencentcloud.Gse.Grpcsdk.RemovePlayerSessionRequest, global::Tencentcloud.Gse.Grpcsdk.GseResponse> __Method_RemovePlayerSession = new grpc::Method<global::Tencentcloud.Gse.Grpcsdk.RemovePlayerSessionRequest, global::Tencentcloud.Gse.Grpcsdk.GseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemovePlayerSession",
        __Marshaller_tencentcloud_gse_grpcsdk_RemovePlayerSessionRequest,
        __Marshaller_tencentcloud_gse_grpcsdk_GseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tencentcloud.Gse.Grpcsdk.DescribePlayerSessionsRequest, global::Tencentcloud.Gse.Grpcsdk.DescribePlayerSessionsResponse> __Method_DescribePlayerSessions = new grpc::Method<global::Tencentcloud.Gse.Grpcsdk.DescribePlayerSessionsRequest, global::Tencentcloud.Gse.Grpcsdk.DescribePlayerSessionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DescribePlayerSessions",
        __Marshaller_tencentcloud_gse_grpcsdk_DescribePlayerSessionsRequest,
        __Marshaller_tencentcloud_gse_grpcsdk_DescribePlayerSessionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tencentcloud.Gse.Grpcsdk.UpdatePlayerSessionCreationPolicyRequest, global::Tencentcloud.Gse.Grpcsdk.GseResponse> __Method_UpdatePlayerSessionCreationPolicy = new grpc::Method<global::Tencentcloud.Gse.Grpcsdk.UpdatePlayerSessionCreationPolicyRequest, global::Tencentcloud.Gse.Grpcsdk.GseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdatePlayerSessionCreationPolicy",
        __Marshaller_tencentcloud_gse_grpcsdk_UpdatePlayerSessionCreationPolicyRequest,
        __Marshaller_tencentcloud_gse_grpcsdk_GseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tencentcloud.Gse.Grpcsdk.TerminateGameServerSessionRequest, global::Tencentcloud.Gse.Grpcsdk.GseResponse> __Method_TerminateGameServerSession = new grpc::Method<global::Tencentcloud.Gse.Grpcsdk.TerminateGameServerSessionRequest, global::Tencentcloud.Gse.Grpcsdk.GseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TerminateGameServerSession",
        __Marshaller_tencentcloud_gse_grpcsdk_TerminateGameServerSessionRequest,
        __Marshaller_tencentcloud_gse_grpcsdk_GseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tencentcloud.Gse.Grpcsdk.ProcessEndingRequest, global::Tencentcloud.Gse.Grpcsdk.GseResponse> __Method_ProcessEnding = new grpc::Method<global::Tencentcloud.Gse.Grpcsdk.ProcessEndingRequest, global::Tencentcloud.Gse.Grpcsdk.GseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ProcessEnding",
        __Marshaller_tencentcloud_gse_grpcsdk_ProcessEndingRequest,
        __Marshaller_tencentcloud_gse_grpcsdk_GseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Tencentcloud.Gse.Grpcsdk.ReportCustomDataRequest, global::Tencentcloud.Gse.Grpcsdk.GseResponse> __Method_ReportCustomData = new grpc::Method<global::Tencentcloud.Gse.Grpcsdk.ReportCustomDataRequest, global::Tencentcloud.Gse.Grpcsdk.GseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReportCustomData",
        __Marshaller_tencentcloud_gse_grpcsdk_ReportCustomDataRequest,
        __Marshaller_tencentcloud_gse_grpcsdk_GseResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tencentcloud.Gse.Grpcsdk.GseGrpcSdkServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GseGrpcSdkService</summary>
    [grpc::BindServiceMethod(typeof(GseGrpcSdkService), "BindService")]
    public abstract partial class GseGrpcSdkServiceBase
    {
      /// <summary>
      /// 上报游戏进程已经就绪
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tencentcloud.Gse.Grpcsdk.GseResponse> ProcessReady(global::Tencentcloud.Gse.Grpcsdk.ProcessReadyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 激活游戏会话
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tencentcloud.Gse.Grpcsdk.GseResponse> ActivateGameServerSession(global::Tencentcloud.Gse.Grpcsdk.ActivateGameServerSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 玩家加入
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tencentcloud.Gse.Grpcsdk.GseResponse> AcceptPlayerSession(global::Tencentcloud.Gse.Grpcsdk.AcceptPlayerSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 玩家移除
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tencentcloud.Gse.Grpcsdk.GseResponse> RemovePlayerSession(global::Tencentcloud.Gse.Grpcsdk.RemovePlayerSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 获取玩家信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tencentcloud.Gse.Grpcsdk.DescribePlayerSessionsResponse> DescribePlayerSessions(global::Tencentcloud.Gse.Grpcsdk.DescribePlayerSessionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 更新玩家加入策略
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tencentcloud.Gse.Grpcsdk.GseResponse> UpdatePlayerSessionCreationPolicy(global::Tencentcloud.Gse.Grpcsdk.UpdatePlayerSessionCreationPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 结束游戏会话
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tencentcloud.Gse.Grpcsdk.GseResponse> TerminateGameServerSession(global::Tencentcloud.Gse.Grpcsdk.TerminateGameServerSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 结束进程
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tencentcloud.Gse.Grpcsdk.GseResponse> ProcessEnding(global::Tencentcloud.Gse.Grpcsdk.ProcessEndingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 上报自定义数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Tencentcloud.Gse.Grpcsdk.GseResponse> ReportCustomData(global::Tencentcloud.Gse.Grpcsdk.ReportCustomDataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GseGrpcSdkService</summary>
    public partial class GseGrpcSdkServiceClient : grpc::ClientBase<GseGrpcSdkServiceClient>
    {
      /// <summary>Creates a new client for GseGrpcSdkService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public GseGrpcSdkServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GseGrpcSdkService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public GseGrpcSdkServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected GseGrpcSdkServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected GseGrpcSdkServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// 上报游戏进程已经就绪
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tencentcloud.Gse.Grpcsdk.GseResponse ProcessReady(global::Tencentcloud.Gse.Grpcsdk.ProcessReadyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProcessReady(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 上报游戏进程已经就绪
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tencentcloud.Gse.Grpcsdk.GseResponse ProcessReady(global::Tencentcloud.Gse.Grpcsdk.ProcessReadyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ProcessReady, null, options, request);
      }
      /// <summary>
      /// 上报游戏进程已经就绪
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tencentcloud.Gse.Grpcsdk.GseResponse> ProcessReadyAsync(global::Tencentcloud.Gse.Grpcsdk.ProcessReadyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProcessReadyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 上报游戏进程已经就绪
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tencentcloud.Gse.Grpcsdk.GseResponse> ProcessReadyAsync(global::Tencentcloud.Gse.Grpcsdk.ProcessReadyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ProcessReady, null, options, request);
      }
      /// <summary>
      /// 激活游戏会话
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tencentcloud.Gse.Grpcsdk.GseResponse ActivateGameServerSession(global::Tencentcloud.Gse.Grpcsdk.ActivateGameServerSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateGameServerSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 激活游戏会话
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tencentcloud.Gse.Grpcsdk.GseResponse ActivateGameServerSession(global::Tencentcloud.Gse.Grpcsdk.ActivateGameServerSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ActivateGameServerSession, null, options, request);
      }
      /// <summary>
      /// 激活游戏会话
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tencentcloud.Gse.Grpcsdk.GseResponse> ActivateGameServerSessionAsync(global::Tencentcloud.Gse.Grpcsdk.ActivateGameServerSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateGameServerSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 激活游戏会话
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tencentcloud.Gse.Grpcsdk.GseResponse> ActivateGameServerSessionAsync(global::Tencentcloud.Gse.Grpcsdk.ActivateGameServerSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ActivateGameServerSession, null, options, request);
      }
      /// <summary>
      /// 玩家加入
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tencentcloud.Gse.Grpcsdk.GseResponse AcceptPlayerSession(global::Tencentcloud.Gse.Grpcsdk.AcceptPlayerSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcceptPlayerSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 玩家加入
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tencentcloud.Gse.Grpcsdk.GseResponse AcceptPlayerSession(global::Tencentcloud.Gse.Grpcsdk.AcceptPlayerSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AcceptPlayerSession, null, options, request);
      }
      /// <summary>
      /// 玩家加入
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tencentcloud.Gse.Grpcsdk.GseResponse> AcceptPlayerSessionAsync(global::Tencentcloud.Gse.Grpcsdk.AcceptPlayerSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcceptPlayerSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 玩家加入
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tencentcloud.Gse.Grpcsdk.GseResponse> AcceptPlayerSessionAsync(global::Tencentcloud.Gse.Grpcsdk.AcceptPlayerSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AcceptPlayerSession, null, options, request);
      }
      /// <summary>
      /// 玩家移除
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tencentcloud.Gse.Grpcsdk.GseResponse RemovePlayerSession(global::Tencentcloud.Gse.Grpcsdk.RemovePlayerSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemovePlayerSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 玩家移除
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tencentcloud.Gse.Grpcsdk.GseResponse RemovePlayerSession(global::Tencentcloud.Gse.Grpcsdk.RemovePlayerSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemovePlayerSession, null, options, request);
      }
      /// <summary>
      /// 玩家移除
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tencentcloud.Gse.Grpcsdk.GseResponse> RemovePlayerSessionAsync(global::Tencentcloud.Gse.Grpcsdk.RemovePlayerSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemovePlayerSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 玩家移除
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tencentcloud.Gse.Grpcsdk.GseResponse> RemovePlayerSessionAsync(global::Tencentcloud.Gse.Grpcsdk.RemovePlayerSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemovePlayerSession, null, options, request);
      }
      /// <summary>
      /// 获取玩家信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tencentcloud.Gse.Grpcsdk.DescribePlayerSessionsResponse DescribePlayerSessions(global::Tencentcloud.Gse.Grpcsdk.DescribePlayerSessionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DescribePlayerSessions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取玩家信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tencentcloud.Gse.Grpcsdk.DescribePlayerSessionsResponse DescribePlayerSessions(global::Tencentcloud.Gse.Grpcsdk.DescribePlayerSessionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DescribePlayerSessions, null, options, request);
      }
      /// <summary>
      /// 获取玩家信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tencentcloud.Gse.Grpcsdk.DescribePlayerSessionsResponse> DescribePlayerSessionsAsync(global::Tencentcloud.Gse.Grpcsdk.DescribePlayerSessionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DescribePlayerSessionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取玩家信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tencentcloud.Gse.Grpcsdk.DescribePlayerSessionsResponse> DescribePlayerSessionsAsync(global::Tencentcloud.Gse.Grpcsdk.DescribePlayerSessionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DescribePlayerSessions, null, options, request);
      }
      /// <summary>
      /// 更新玩家加入策略
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tencentcloud.Gse.Grpcsdk.GseResponse UpdatePlayerSessionCreationPolicy(global::Tencentcloud.Gse.Grpcsdk.UpdatePlayerSessionCreationPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePlayerSessionCreationPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 更新玩家加入策略
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tencentcloud.Gse.Grpcsdk.GseResponse UpdatePlayerSessionCreationPolicy(global::Tencentcloud.Gse.Grpcsdk.UpdatePlayerSessionCreationPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdatePlayerSessionCreationPolicy, null, options, request);
      }
      /// <summary>
      /// 更新玩家加入策略
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tencentcloud.Gse.Grpcsdk.GseResponse> UpdatePlayerSessionCreationPolicyAsync(global::Tencentcloud.Gse.Grpcsdk.UpdatePlayerSessionCreationPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePlayerSessionCreationPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 更新玩家加入策略
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tencentcloud.Gse.Grpcsdk.GseResponse> UpdatePlayerSessionCreationPolicyAsync(global::Tencentcloud.Gse.Grpcsdk.UpdatePlayerSessionCreationPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdatePlayerSessionCreationPolicy, null, options, request);
      }
      /// <summary>
      /// 结束游戏会话
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tencentcloud.Gse.Grpcsdk.GseResponse TerminateGameServerSession(global::Tencentcloud.Gse.Grpcsdk.TerminateGameServerSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TerminateGameServerSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 结束游戏会话
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tencentcloud.Gse.Grpcsdk.GseResponse TerminateGameServerSession(global::Tencentcloud.Gse.Grpcsdk.TerminateGameServerSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TerminateGameServerSession, null, options, request);
      }
      /// <summary>
      /// 结束游戏会话
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tencentcloud.Gse.Grpcsdk.GseResponse> TerminateGameServerSessionAsync(global::Tencentcloud.Gse.Grpcsdk.TerminateGameServerSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TerminateGameServerSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 结束游戏会话
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tencentcloud.Gse.Grpcsdk.GseResponse> TerminateGameServerSessionAsync(global::Tencentcloud.Gse.Grpcsdk.TerminateGameServerSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TerminateGameServerSession, null, options, request);
      }
      /// <summary>
      /// 结束进程
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tencentcloud.Gse.Grpcsdk.GseResponse ProcessEnding(global::Tencentcloud.Gse.Grpcsdk.ProcessEndingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProcessEnding(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 结束进程
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tencentcloud.Gse.Grpcsdk.GseResponse ProcessEnding(global::Tencentcloud.Gse.Grpcsdk.ProcessEndingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ProcessEnding, null, options, request);
      }
      /// <summary>
      /// 结束进程
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tencentcloud.Gse.Grpcsdk.GseResponse> ProcessEndingAsync(global::Tencentcloud.Gse.Grpcsdk.ProcessEndingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProcessEndingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 结束进程
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tencentcloud.Gse.Grpcsdk.GseResponse> ProcessEndingAsync(global::Tencentcloud.Gse.Grpcsdk.ProcessEndingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ProcessEnding, null, options, request);
      }
      /// <summary>
      /// 上报自定义数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tencentcloud.Gse.Grpcsdk.GseResponse ReportCustomData(global::Tencentcloud.Gse.Grpcsdk.ReportCustomDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReportCustomData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 上报自定义数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Tencentcloud.Gse.Grpcsdk.GseResponse ReportCustomData(global::Tencentcloud.Gse.Grpcsdk.ReportCustomDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReportCustomData, null, options, request);
      }
      /// <summary>
      /// 上报自定义数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tencentcloud.Gse.Grpcsdk.GseResponse> ReportCustomDataAsync(global::Tencentcloud.Gse.Grpcsdk.ReportCustomDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReportCustomDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 上报自定义数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Tencentcloud.Gse.Grpcsdk.GseResponse> ReportCustomDataAsync(global::Tencentcloud.Gse.Grpcsdk.ReportCustomDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReportCustomData, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override GseGrpcSdkServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GseGrpcSdkServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(GseGrpcSdkServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ProcessReady, serviceImpl.ProcessReady)
          .AddMethod(__Method_ActivateGameServerSession, serviceImpl.ActivateGameServerSession)
          .AddMethod(__Method_AcceptPlayerSession, serviceImpl.AcceptPlayerSession)
          .AddMethod(__Method_RemovePlayerSession, serviceImpl.RemovePlayerSession)
          .AddMethod(__Method_DescribePlayerSessions, serviceImpl.DescribePlayerSessions)
          .AddMethod(__Method_UpdatePlayerSessionCreationPolicy, serviceImpl.UpdatePlayerSessionCreationPolicy)
          .AddMethod(__Method_TerminateGameServerSession, serviceImpl.TerminateGameServerSession)
          .AddMethod(__Method_ProcessEnding, serviceImpl.ProcessEnding)
          .AddMethod(__Method_ReportCustomData, serviceImpl.ReportCustomData).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GseGrpcSdkServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ProcessReady, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tencentcloud.Gse.Grpcsdk.ProcessReadyRequest, global::Tencentcloud.Gse.Grpcsdk.GseResponse>(serviceImpl.ProcessReady));
      serviceBinder.AddMethod(__Method_ActivateGameServerSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tencentcloud.Gse.Grpcsdk.ActivateGameServerSessionRequest, global::Tencentcloud.Gse.Grpcsdk.GseResponse>(serviceImpl.ActivateGameServerSession));
      serviceBinder.AddMethod(__Method_AcceptPlayerSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tencentcloud.Gse.Grpcsdk.AcceptPlayerSessionRequest, global::Tencentcloud.Gse.Grpcsdk.GseResponse>(serviceImpl.AcceptPlayerSession));
      serviceBinder.AddMethod(__Method_RemovePlayerSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tencentcloud.Gse.Grpcsdk.RemovePlayerSessionRequest, global::Tencentcloud.Gse.Grpcsdk.GseResponse>(serviceImpl.RemovePlayerSession));
      serviceBinder.AddMethod(__Method_DescribePlayerSessions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tencentcloud.Gse.Grpcsdk.DescribePlayerSessionsRequest, global::Tencentcloud.Gse.Grpcsdk.DescribePlayerSessionsResponse>(serviceImpl.DescribePlayerSessions));
      serviceBinder.AddMethod(__Method_UpdatePlayerSessionCreationPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tencentcloud.Gse.Grpcsdk.UpdatePlayerSessionCreationPolicyRequest, global::Tencentcloud.Gse.Grpcsdk.GseResponse>(serviceImpl.UpdatePlayerSessionCreationPolicy));
      serviceBinder.AddMethod(__Method_TerminateGameServerSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tencentcloud.Gse.Grpcsdk.TerminateGameServerSessionRequest, global::Tencentcloud.Gse.Grpcsdk.GseResponse>(serviceImpl.TerminateGameServerSession));
      serviceBinder.AddMethod(__Method_ProcessEnding, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tencentcloud.Gse.Grpcsdk.ProcessEndingRequest, global::Tencentcloud.Gse.Grpcsdk.GseResponse>(serviceImpl.ProcessEnding));
      serviceBinder.AddMethod(__Method_ReportCustomData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tencentcloud.Gse.Grpcsdk.ReportCustomDataRequest, global::Tencentcloud.Gse.Grpcsdk.GseResponse>(serviceImpl.ReportCustomData));
    }

  }
}
#endregion
